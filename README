# Download Android source with local_manifests
 Refer to http://source.android.com/source/downloading.html

  $ repo init -u https://android.googlesource.com/platform/manifest -b android10-release
  $ git clone https://github.com/android-rv/local_manifests .repo/local_manifests -b arv-10
  $ repo sync

# Patch Android source
  $ aosp-riscv/reproduce.sh

# Build Android
 Continue build referring to http://source.android.com/source/building.html

  $ source build/envsetup.sh
  $ lunch aosp_riscv64-eng
  $ export LD_LIBRARY_PATH="${ANDROID_BUILD_TOP}/out/soong/host/linux-x86/lib64:${ANDROID_BUILD_TOP}/prebuilts/build-tools/linux-x86/lib64:${ANDROID_BUILD_TOP}/prebuilts/clang/host/linux-x86/clang-dev/lib64:${ANDROID_BUILD_TOP}/out/soong/host/linux-x86/lib:/${ANDROID_BUILD_TOP}/out/host/linux-x86/lib64:${ANDROID_BUILD_TOP}/prebuilts/clang/host/linux-x86/clang-dev/lib64/"
  $ m

# Run Emulator
  $ emulator -selinux permissive -qemu -smp 2 -m 3800M -bios prebuilts/qemu-kernel/riscv64/ranchu/fw_jump.bin

Use -j[n] option on sync & build steps, if build host has a good number of CPU cores.
